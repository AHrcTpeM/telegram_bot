import TelegramApi, { InlineKeyboardMarkup } from "node-telegram-bot-api";
import 'dotenv/config';
import path from "path";

import { info_book } from './info'

const { BOT_TOKEN } = process.env;

const bot = new TelegramApi(BOT_TOKEN || '', {polling: true});

const againOptions = {
    reply_markup: {
        inline_keyboard: [
            [{text: '–ò–Ω—Ñ–æ', callback_data: '/info'}, {text: '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã', callback_data: '/rule'}, {text: '–ü—Ä–æ–ª–æ–≥', callback_data: '/game0'}],
            [{text: '–õ–∏—Å—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞', callback_data: '/sheet'}, {text: '–ö–∞—Ä—Ç–∞', callback_data: '/map'}],
            [{text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É / –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data: '/game'}],
        ]
    }
}

let playerProgress: Record<number, number> = {};

const start = async () => {
    bot.setMyCommands([
        {command: '/start', description: '–ù–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ'},
        {command: '/dice', description: '–ö–∏–Ω—É—Ç—å –¥–≤–∞ –∫—É–±–∏–∫–∞'},
        {command: '/map', description: '–ö–∞—Ä—Ç–∞'},
        {command: '/note', description: '–ó–∞–º–µ—Ç–∫–∞ –æ—Ç –±–æ—Ç–∞'},
    ])

    bot.on('message', async msg => {
        //console.log(__dirname);
        const text = msg.text;
        const chatId = msg.chat.id;

        try {
            if (text === '/start') {
                await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/8a1/9aa/8a19aab4-98c0-37cb-a3d4-491cb94d7e12/3.webp')
                return bot.sendMessage(chatId, `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ò–≥–æ—Ä—è –ü–æ–ø–∫–æ–≤–∞üòÅüëç
–¢—É—Ç, –Ω–∞ –¥–æ—Å—É–≥–µ, –º–æ–∂–Ω–æ –ø–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–∏–≥—Éüé≤üìñ`, againOptions);
            }            
            if (text === '/dice') {
                const dice1 = Math.ceil(Math.random() * 6);
                const dice2 = Math.ceil(Math.random() * 6);

                return bot.sendMessage(chatId, `–ö—É–±–∏–∫–∏: ${dice1} + ${dice2} = ${dice1 + dice2}`);
            }
            if (text === '/map') {
                return bot.sendPhoto(chatId, path.join(__dirname + "/../assets/images/map.png"));
            }
            if (text === '/note') {
                return bot.sendMessage(chatId, `–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö, –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–º—ã—Å–ª–µ –±—ã–ª —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é.\n–°–æ–±–ª—é–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –æ—Å—Ç–∞–µ—Ç—Å—è –∑–∞ —á–∏—Ç–∞—Ç–µ–ª–µ–º. –£ –±–æ—Ç–∞ –Ω–µ—Ç —Ü–µ–ª–∏ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤–∞—à–µ–π —á–µ—Å—Ç–Ω–æ—Å—Ç—å—é:) –í—Å–µ –¥–µ—Ç–∞–ª–∏ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –Ω–∞ –ª–∏—Å—Ç–æ—á–∫–µ, –∞ –º–æ–∂–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å.\n\n–ß—Ç–æ –±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å - –∏–¥–∏—Ç–µ –Ω–∞ 150 –ø–∞—Ä–∞–≥—Ä–∞—Ñ ('150' –≤ —á–∞—Ç).`, { reply_markup: {
                    inline_keyboard: [[{text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É', callback_data: '/game'}]]
                }});
            }
            if (text === '150') {
                return startGame(chatId, 150);
            }
            if (text === '96') {
                return startGame(chatId, 96);
            }

            return bot.sendMessage(chatId, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!)');
        } catch (e) {
            return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
        }

    })

    bot.on('callback_query', async msg => {       
        const data = msg.data || 0;
        const chatId = msg.from.id;           

        try {
            if (data === '/rule') {
                return bot.sendMessage(chatId, info_book.rule[0].replace(/(?<=\s)\n/gi, ''), { reply_markup: {
                    inline_keyboard: [[{text: '–î–∞–ª—å—à–µ', callback_data: '/rule1'}]]
                }});
            }
            if (data === '/rule1') {
                return bot.sendMessage(chatId, info_book.rule[1].replace(/(?<=\s)\n/gi, ''), { reply_markup: {
                    inline_keyboard: [[{text: '–î–∞–ª—å—à–µ', callback_data: '/rule2'}]]
                }});
            }
            if (data === '/rule2') {
                return bot.sendMessage(chatId, info_book.rule[2].replace(/(?<=\s)\n/gi, ''), againOptions);
            }
            if (data === '/info') {
                await bot.sendPhoto(chatId, path.join(__dirname + "/../assets/images/main.jpg"));
                return bot.sendMessage(chatId, info_book.info, againOptions);
            }
            if (data === '/game') {
                return startGame(chatId, playerProgress[chatId] || 1);
            }
            if (data === '/game0') {
                return startGame(chatId, 0);
            }
            if (data === '/map') {
                return bot.sendPhoto(chatId, path.join(__dirname + "/../assets/images/map.png"));
            }
            if (data === '/sheet') {
                return bot.sendPhoto(chatId, path.join(__dirname + "/../assets/images/sheet.png"));
            }            

            return startGame(chatId, +data);
        } catch (e) {
            return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è —Ç–æ –æ—à–∏–±–æ—á–∫–∞!)');
        }
    })
    
    console.log('Bot is running...');
}

start();

const startGame = async (chatId: number, page: number) => {
    playerProgress[chatId] = [83, 116, 150, 151, 204].includes(page) ? 1 : page;
    let pageBook = info_book.book[page].text.replace(/(?<=\s)\n/gi, '');
    let option = info_book.transitions[page].option;
    try {
        await bot.sendPhoto(chatId, path.join(__dirname + `/../assets/images/${page}.png`));
    } catch(err) {}    
    await bot.sendMessage(chatId, pageBook, option);
}